# API网关服务器端口,后面访问都是通过这个端口号进行访问的,而不再是通过之前的具体业务实现API的端口进行访问
# 例如 http://localhost:8280/customer-feign/api/feign-customer/hi
server.port=8280
spring.application.name=ZUUL-PROXY
# 注册到注册中心,必不可少的一步,注册后Zuul将默认从Eureka服务器中获取所注册的服务
# 然后在启动类上加入@EnableZuulProxy注解就行了。
eureka.client.serviceUrl.defaultZone=http://localhost:8081/eureka/
# 解决 zuul No route found for uri 问题
# 配置了前缀和自定义路由策略时，需要加此配置，否则会出现zuul No route found for uri 问题
zuul.servlet-path=/
# 统一前缀,这个很简单,就是我们可以在前面加一个统一的前缀.
# 比如我们没加前缀之前，调用的是http://localhost:8280/customer-feign/api/feign-customer/hi
# 加了前缀之后，调用的是http://localhost:8280/zuul/customer-feign/api/feign-customer/hi
zuul.prefix=/zuul
# 路由策略配置
# 你会发现前面的访问方式(直接使用服务名)，需要将微服务名称(customer-feign)暴露给用户，会存在安全性问题。
# 所以，可以自定义路径来替代微服务名称，即自定义路由策略。
# 这个时候你就可以使用http://localhost:8280/zuul/eric-customer-service/api/feign-customer/hi进行访问了
zuul.routes.customer-feign=/eric-customer-service/**
# 服务名屏蔽
# 这个时候你别以为你好了，你可以试试，在你配置完路由策略之后使用微服务名称还是可以访问的，这个时候你需要将服务名屏蔽。
zuul.ignored-services="*"
# 路径屏蔽
# Zuul还可以指定屏蔽掉的路径 URI，即只要用户请求中包含指定的 URI 路径，那么该请求将无法访问到指定的服务。
# 这样关于 auto 的请求我们就可以过滤掉了。
# ** 代表匹配多级任意路径
# * 代表匹配一级任意路径
# 通过该方式可以限制用户的权限。
zuul.ignored-patterns=**/auto/**